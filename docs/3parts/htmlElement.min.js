"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

window.isDef = function (obj) {
  return obj !== null && typeof obj !== "undefined";
};
document.ready = function (fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
};

document.getJSON = function (url, onSuccess, onError, options) {
  var request = new XMLHttpRequest();
  if (isDef(options)) {
    if (options.forceReload) {
      var rnd = Math.random();
      if (url.indexOf("?") > -1) {
        url += "&___t=" + rnd;
      } else {
        url += "?___t=" + rnd;
      }
    }
  }
  request.open("GET", url, true);
  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      if (onSuccess) {
        onSuccess(JSON.parse(request.responseText));
      }
    } else {
      if (onError) {
        onError(request);
      }
    }
  };
  request.send();
};

document.ajax = function (method, url, data, onSuccess, onError) {
  var request = new XMLHttpRequest();
  request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
  request.open(method, url, true);
  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      if (onSuccess) {
        onSuccess(request.responseText);
      }
    } else {
      if (onError) {
        onError(request);
      }
    }
  };
  request.send(data);
};

document.getScripts = function (arrScriptsUrl) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arrScriptsUrl[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var url = _step.value;

      document.afterBegin(newElement("script", { src: url }));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

document.getStyles = function (arrStylessUrl) {
  var media = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "all";
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = arrStylessUrl[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var url = _step2.value;

      document.afterBegin(newElement("link", { rel: "stylesheet", type: "text/css", href: url, media: media }));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};


HTMLElement.prototype.addClass = function (className) {
  var classes = className.split(" ");
  for (var i = 0; i < classes.length; i++) {
    var cl = classes[i];
    if (this.classList.contains(cl)) {
      continue;
    }
    this.classList.add(cl);
  }
  return this;
};

HTMLElement.prototype.removeClass = function (className) {
  var classes = className.split(" ");
  this.classList.remove(classes);
  return this;
};

HTMLElement.prototype.toggleClass = function (className) {
  var classes = className.split(" ");
  for (var i = 0; i < classes.length; i++) {
    var cl = classes[i];
    if (this.classList.contains(cl)) {
      this.classList.remove(cl);
    } else {
      this.classList.add(cl);
    }
  }
};

HTMLElement.prototype.hasClass = function (className) {
  return this.classList.contains(className);
};

HTMLElement.prototype.css = function (cssProperty, cssValue) {
  var s = this.style;
  if (arguments.length === 1 && typeof cssProperty === "string") {
    return s[cssProperty];
  }
  if ((typeof cssProperty === "undefined" ? "undefined" : _typeof(cssProperty)) === "object") {
    for (var p in cssProperty) {
      s[p] = cssProperty[p];
    }
  } else {
    this.style[cssProperty] = cssValue;
  }
  return this;
};

HTMLElement.prototype.beforeBeginHTML = function (html) {
  return this.insertAdjacentHTML("beforebegin", html);
};
HTMLElement.prototype.afterBeginHTML = function (html) {
  return this.insertAdjacentHTML("afterBegin", html);
};
HTMLElement.prototype.beforeEndHTML = function (html) {
  return this.insertAdjacentHTML("beforeEnd", html);
};
HTMLElement.prototype.afterEndHTML = function (html) {
  return this.insertAdjacentHTML("afterEnd", html);
};

HTMLElement.prototype.beforeBegin = function (el) {
  return this.insertAdjacentElement("beforebegin", el);
};
HTMLElement.prototype.afterBegin = function (el) {
  return this.insertAdjacentElement("afterbegin", el);
};
HTMLElement.prototype.beforeEnd = function (el) {
  return this.insertAdjacentElement("beforeend", el);
};
HTMLElement.prototype.afterEnd = function (el) {
  return this.insertAdjacentElement("afterend", el);
};

HTMLElement.prototype.outerHeight = function (withMargin) {
  if (withMargin) {
    var height = this.offsetHeight;
    var style = getComputedStyle(this);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    return height;
  }
  return this.offsetHeight;
};

HTMLElement.prototype.outerWidth = function (withMargin) {
  if (withMargin) {
    var width = this.offsetWidth;
    var style = getComputedStyle(this);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
    return width;
  }
  return this.offsetWidth;
};

HTMLElement.prototype.show = function (visible) {
  if (visible) {
    this.css({ "display": "", visibility: "" });
  } else {
    this.style.display = "none";
  }
};

HTMLElement.prototype.isVisible = function () {
  return this.css("display") !== "none";
};

HTMLElement.prototype.toggleVisible = function () {
  this.show(!this.isVisible());
};

HTMLElement.prototype.html = function (st) {
  if (arguments.length === 0) {
    return this.innerHTML;
  }
  this.innerHTML = st;
  return this;
};

HTMLElement.prototype.text = function () {
  return this.textContent;
};

HTMLElement.prototype.parent = function () {
  return this.parentNode;
};

HTMLElement.prototype.outerHtml = function (st) {
  if (arguments.length === 1) {
    this.outerHTML = st;
  } else {
    return this.outerHTML;
  }
};

HTMLElement.prototype.attr = function (name, value) {
  if (arguments.length === 2) {
    this.setAttribute(name, value);
  } else {
    return this.getAttribute(name);
  }
};

HTMLElement.prototype.attrs = function (attributes) {
  if (arguments.length === 1) {
    for (var a in attributes) {
      this.attr(a, attributes[a]);
    }
    return this;
  }
  return [];
};

HTMLElement.prototype.contains = function (item) {
  var it = item;
  if (isDef(item)) {
    while (it.parentNode !== null && it !== this) {
      it = it.parentNode;
    }
    return it === this;
  }
  return false;
};

HTMLElement.prototype.offset = function () {
  var rect = this.getBoundingClientRect();
  return {
    top: rect.top + document.body.scrollTop,
    left: rect.left + document.body.scrollLeft
  };
};

HTMLElement.prototype.qs = function (selector) {
  return this.querySelector(selector);
};

HTMLElement.prototype.qsa = function (selector) {
  return this.querySelectorAll(selector);
};


HTMLFormElement.prototype.val = function () {
  var dic = {};
  var formdata = new FormData(this);
  var done = false;
  var iterator = formdata.entries();
  do {
    var prop = iterator.next();
    if (prop.done && !prop.value) {
      done = true;
    } else {
      dic[prop.value[0]] = prop.value[1];
    }
  } while (!done);
  return dic;
};

HTMLFormElement.prototype.setInputs = function (obj) {
  var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var evt = new Event("change");
  for (var key in obj) {
    var val = obj[key];
    var inputs = this.qsa("[name='" + key + "']");
    if (inputs) {
      if (inputs.length > 1) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = inputs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var input = _step3.value;

            if (input.checked) {
              input.checked = false;
            }
            var vals = String(val).split(",");
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = vals[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var v = _step4.value;

                if (input.value === v) {
                  input.checked = true;
                  if (triggerChange) {
                    input.dispatchEvent(evt);
                  }
                  break;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      } else if (inputs.length === 1) {
        var _input = inputs[0];
        if (_input.type === "checkbox") {
          if (_input.checked) {
            _input.checked = false;
          }
          if (_input.value == val) {
            _input.checked = true;
          }
        } else {
          _input.value = val;
        }
      }
    }
  }
};
HTMLInputElement.prototype.toTextBox = function () {
  this.attr("type", "text");
};

HTMLInputElement.prototype.toPasswordBox = function () {
  this.attr("type", "password");
};

HTMLInputElement.prototype.togglePassword = function () {
  var type = this.attr("type");
  if (type === "text") {
    this.attr("type", "password");
  } else if (type === "password") {
    this.attr("type", "text");
  } else {
    throw Error("type conversion error");
  }
};
HTMLTextAreaElement.prototype.insertAtCaret = function (text) {
  text = text || "";
  if (document.selection) {
    this.focus();
    var sel = document.selection.createRange();
    sel.text = text;
  } else if (this.selectionStart || this.selectionStart === 0) {
    var startPos = this.selectionStart;
    var endPos = this.selectionEnd;
    this.value = this.value.substring(0, startPos) + text + this.value.substring(endPos, this.value.length);
    this.selectionStart = startPos + text.length;
    this.selectionEnd = startPos + text.length;
  } else {
    this.value += text;
  }
};

window.newElement = function (tagName, attributes, htmlContent, events) {
  var tag = document.createElement(tagName);
  if (attributes) {
    tag.attrs(attributes);
  }
  if (htmlContent) {
    tag.html(htmlContent);
  }
  if (events) {
    for (var ev in events) {
      tag.addEventListener(ev, events[ev]);
    }
  }
  return tag;
};

window.qs = function (id) {
  return document.querySelector(id);
};

window.qsa = function (selectors) {
  return document.querySelectorAll(selectors);
};

window.qsi = function (id) {
  return document.querySelector("#" + id);
};
if (!NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (fn) {
    if (fn) {
      for (var i = 0; i < this.length; i++) {
        var it = this[i];
        fn(it, i, this);
      }
    }
  };
}

NodeList.prototype.addClass = function (classNames) {
  this.forEach(function (it) {
    return it.addClass(classNames);
  });
};

NodeList.prototype.removeClass = function (classNames) {
  this.forEach(function (it) {
    return it.removeClass(classNames);
  });
};

NodeList.prototype.toggleClass = function (classNames) {
  this.forEach(function (it) {
    return it.toggleClass(classNames);
  });
};

NodeList.prototype.css = function (cssProperty, cssValue) {
  this.forEach(function (it) {
    return it.css(cssProperty, cssValue);
  });
};

NodeList.prototype.show = function (visible) {
  this.forEach(function (it) {
    return it.show(visible);
  });
};