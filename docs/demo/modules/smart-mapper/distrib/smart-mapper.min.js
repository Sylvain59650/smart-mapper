(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.SmartMapper = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  function isDef(obj) {
    return obj !== null && typeof obj !== "undefined";
  }

  function mappingObject(compiles, item, array, index) {
    var target = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = compiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var c = _step.value;

        var value = Path.get(item, c.relateTo, null);
        if (c.operate && value !== null) {
          value = c.operate.execute(value, item, array, index);
        }
        if (value !== null) {
          if (c.operate && c.operate.postCondition) {
            if (c.operate.postCondition(value) === true) {
              target[c.key] = value;
            }
          } else {
            target[c.key] = value;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return target;
  }

  function compile(template) {
    var compiles = [];
    for (var key in template.mappings) {
      var c = {
        key: key,
        relateTo: template.mappings[key],
        operate: isDef(template.rules) ? template.rules.find(function (x) {
          return x.on === key;
        }) : null
      };
      compiles.push(c);
    }
    return compiles;
  }

  function mapping(template, data) {
    var validate = template.validate || function () {
      return true;
    };
    var childrenPropertyName = template.childrenPropertyName || "childs";
    var compiles = compile(template);
    if (Array.isArray(data)) {
      var target = [];
      for (var i = 0; i < data.length; i++) {
        var m = mappingObject(compiles, data[i], data, i);
        if (template.childrens) {
          var childrens = template.childrens(m);
          if (childrens) {
            m[childrenPropertyName] = mapping(template, childrens);
          }
        }

        if (m !== null && validate(m)) {
          target.push(m);
        }
      }
      return target;
    }
    return mappingObject(compiles, data, data, -1);
  }

  exports.mapping = mapping;
});